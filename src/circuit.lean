import vorspiel boolean_logic binary_recursion

universes u v

inductive circuit : ‚Ñï ‚Üí ‚Ñï ‚Üí Type
| relay    {n}     : fin n ‚Üí circuit n 1 -- id gate
| not      {n}     : fin n ‚Üí circuit n 1 -- NOT disjunction
| and      {n}     : finset (fin n) ‚Üí circuit n 1 -- AND conjunction
| or       {n}     : finset (fin n) ‚Üí circuit n 1 -- OR disjunction
| parallel {n m k} : circuit n m ‚Üí circuit n k ‚Üí circuit n (k + m)
| serial   {n m k} : circuit n m ‚Üí circuit m k ‚Üí circuit n k

infixl ` ‚à• `: 70 := circuit.parallel

infixl ` ‚ñ∑ `: 70 := circuit.serial

namespace circuit

@[simp] def size : ‚àÄ {n m}, circuit n m ‚Üí ‚Ñï
| _ _ (relay i) := 0
| _ _ (not i)   := 1
| _ _ (and s)   := 1
| _ _ (or s)    := 1
| _ _ (c‚ÇÅ ‚à• c‚ÇÇ) := c‚ÇÅ.size + c‚ÇÇ.size
| _ _ (c‚ÇÅ ‚ñ∑ c‚ÇÇ) := c‚ÇÅ.size + c‚ÇÇ.size

@[simp] def depth : ‚àÄ {n m}, circuit n m ‚Üí ‚Ñï
| _ _ (relay i) := 0
| _ _ (not i)   := 1
| _ _ (and s)   := 1
| _ _ (or s)    := 1
| _ _ (c‚ÇÅ ‚à• c‚ÇÇ) := max c‚ÇÅ.depth c‚ÇÇ.depth
| _ _ (c‚ÇÅ ‚ñ∑ c‚ÇÇ) := c‚ÇÅ.depth + c‚ÇÇ.depth

lemma depth_le_size : ‚àÄ {n m} (c : circuit n m), c.depth ‚â§ c.size
| _ _ (relay i) := by simp
| _ _ (not i)   := by simp
| _ _ (and s)   := by simp
| _ _ (or s)    := by simp
| _ _ (c‚ÇÅ ‚à• c‚ÇÇ) := by simp; exact ‚ü®le_add_right (depth_le_size c‚ÇÅ), le_add_left (depth_le_size c‚ÇÇ)‚ü©
| _ _ (c‚ÇÅ ‚ñ∑ c‚ÇÇ) := by simp; exact add_le_add (depth_le_size c‚ÇÅ) (depth_le_size c‚ÇÇ)

@[simp] def eval : Œ† {n m}, circuit n m ‚Üí ùïì n ‚Üí ùïì m
| _ _ (relay i) d := d.nth i
| _ _ (not i)   d := bnot (d.nth i)
| _ _ (and s)   d := ‚Üë(s.inf d.nth)
| _ _ (or s)    d := ‚Üë(s.sup d.nth)
| _ _ (c‚ÇÅ ‚à• c‚ÇÇ) d := (c‚ÇÅ.eval d) ++·µ• (c‚ÇÇ.eval d)
| _ _ (c‚ÇÅ ‚ñ∑ c‚ÇÇ) d := c‚ÇÇ.eval (c‚ÇÅ.eval d)

def val {n} (c : circuit n 1) (v : ùïì n) : bool := (c.eval v).head

@[simp] def bounded (b : ‚Ñï) : ‚àÄ {n m}, circuit n m ‚Üí Prop
| _ _ (relay i) := true
| _ _ (not i)   := true
| _ _ (and s)   := s.card ‚â§ b
| _ _ (or s)    := s.card ‚â§ b
| _ _ (c‚ÇÅ ‚à• c‚ÇÇ) := c‚ÇÅ.bounded ‚àß c‚ÇÇ.bounded
| _ _ (c‚ÇÅ ‚ñ∑ c‚ÇÇ) := c‚ÇÅ.bounded ‚àß c‚ÇÇ.bounded

section map

@[simp] def map : ‚àÄ {n n' m} (f : fin n ‚Üí fin n'), circuit n m ‚Üí circuit n' m
| _ _ _ f (relay i) := relay (f i)
| _ _ _ f (not i)   := not (f i)
| _ _ _ f (and s)   := and (s.image f)
| _ _ _ f (or s)    := or (s.image f)
| _ _ _ f (c‚ÇÅ ‚à• c‚ÇÇ) := parallel (c‚ÇÅ.map f) (c‚ÇÇ.map f)
| _ _ _ f (c‚ÇÅ ‚ñ∑ c‚ÇÇ) := serial (c‚ÇÅ.map f) c‚ÇÇ

@[simp] lemma map_size : ‚àÄ {n n' m} (f : fin n ‚Üí fin n') (c : circuit n m), (c.map f).size = c.size
| _ _ _ f (relay i) := by simp
| _ _ _ f (not i)   := by simp
| _ _ _ f (and s)   := by simp
| _ _ _ f (or s)    := by simp
| _ _ _ f (c‚ÇÅ ‚à• c‚ÇÇ) := by simp[map_size f c‚ÇÅ, map_size f c‚ÇÇ]
| _ _ _ f (c‚ÇÅ ‚ñ∑ c‚ÇÇ) := by simp[map_size f c‚ÇÅ]

@[simp] lemma map_depth : ‚àÄ {n n' m} (f : fin n ‚Üí fin n') (c : circuit n m), (c.map f).depth = c.depth
| _ _ _ f (relay i) := by simp
| _ _ _ f (not i)   := by simp
| _ _ _ f (and s)   := by simp
| _ _ _ f (or s)    := by simp
| _ _ _ f (c‚ÇÅ ‚à• c‚ÇÇ) := by simp[map_depth f c‚ÇÅ, map_depth f c‚ÇÇ]
| _ _ _ f (c‚ÇÅ ‚ñ∑ c‚ÇÇ) := by simp[map_depth f c‚ÇÅ]

lemma map_eval : ‚àÄ {n n' m} (f : fin n ‚Üí fin n') (c : circuit n m) (v),
  (c.map f).eval v = c.eval (vector.of_fn $ Œª i, v.nth (f i))
| _ _ _ f (relay i) v := by simp
| _ _ _ f (not i)   v := by simp
| _ _ _ f (and s)   v := by simp[finset.inf_image]; refine congr_arg _ (funext $ by simp)
| _ _ _ f (or s)    v := by simp[finset.sup_image]; refine congr_arg _ (funext $ by simp)
| _ _ _ f (c‚ÇÅ ‚à• c‚ÇÇ) v := by simp[map_eval f c‚ÇÅ, map_eval f c‚ÇÇ]
| _ _ _ f (c‚ÇÅ ‚ñ∑ c‚ÇÇ) v := by simp[map_eval f c‚ÇÅ]

@[simp] lemma map_bounded (b) : ‚àÄ {n n' m} (f : fin n ‚Üí fin n') (c : circuit n m), c.bounded b ‚Üí (c.map f).bounded b
| _ _ _ f (relay i) h := by simp
| _ _ _ f (not i)   h := by simp
| _ _ _ f (and s)   h := le_trans finset.card_image_le h
| _ _ _ f (or s)    h := le_trans finset.card_image_le h
| _ _ _ f (c‚ÇÅ ‚à• c‚ÇÇ) h := ‚ü®map_bounded f c‚ÇÅ h.1, map_bounded f c‚ÇÇ h.2‚ü©
| _ _ _ f (c‚ÇÅ ‚ñ∑ c‚ÇÇ) h := ‚ü®map_bounded f c‚ÇÅ h.1, h.2‚ü©

end map

section disjoint_parallel
variables {n‚ÇÅ n‚ÇÇ m‚ÇÅ m‚ÇÇ : ‚Ñï} (c‚ÇÅ : circuit n‚ÇÅ m‚ÇÅ) (c‚ÇÇ : circuit n‚ÇÇ m‚ÇÇ)

def disjoint_parallel : circuit (n‚ÇÇ + n‚ÇÅ) (m‚ÇÇ + m‚ÇÅ) :=
let c'‚ÇÅ : circuit (n‚ÇÇ + n‚ÇÅ) m‚ÇÅ := c‚ÇÅ.map (Œª i, ‚ü®i, nat.lt_add_left _ _ _ i.property‚ü©),
    c'‚ÇÇ : circuit (n‚ÇÇ + n‚ÇÅ) m‚ÇÇ := c‚ÇÇ.map (Œª i, ‚ü®n‚ÇÅ + i, by simp[add_comm]‚ü©) in
c'‚ÇÅ ‚à• c'‚ÇÇ

infixl ` |+| `:65 := disjoint_parallel

@[simp] lemma disjoint_parallel_size : (c‚ÇÅ |+| c‚ÇÇ).size = c‚ÇÅ.size + c‚ÇÇ.size := by simp[(|+|)]

@[simp] lemma disjoint_parallel_depth : (c‚ÇÅ |+| c‚ÇÇ).depth = max c‚ÇÅ.depth c‚ÇÇ.depth := by simp[(|+|)]

@[simp] lemma disjoint_parallel_eval_append (v‚ÇÅ : ùïì n‚ÇÅ) (v‚ÇÇ : ùïì n‚ÇÇ) : 
  (c‚ÇÅ |+| c‚ÇÇ).eval (v‚ÇÅ ++·µ• v‚ÇÇ) = c‚ÇÅ.eval v‚ÇÅ ++·µ• c‚ÇÇ.eval v‚ÇÇ :=
by simp[(|+|), map_eval]

@[simp] lemma disjoint_parallel_eval_cons {n} (c‚ÇÅ : circuit 1 m‚ÇÅ) (c‚ÇÇ : circuit n m‚ÇÇ) (b : bool) (v : ùïì n) :
  (c‚ÇÅ |+| c‚ÇÇ).eval (b ::·µ• v) = c‚ÇÅ.eval b ++·µ• c‚ÇÇ.eval v :=
by { have : b ::·µ• v = (b : ùïì 1) ++·µ• v, by simp[vector.coe_succ],
     simp[this] }

end disjoint_parallel

section gate
variables {n : ‚Ñï}

section

def andl (i j : fin n) : circuit n 1 := and {i, j}

def orl (i j : fin n) : circuit n 1 := or {i, j}

@[simp] lemma andl_bounded {i j : fin n} : bounded 2 (andl i j) := by simpa using finset.card_insert_le i {j}

@[simp] lemma orl_bounded {i j : fin n} : bounded 2 (orl i j) := by simpa using finset.card_insert_le i {j}

@[simp] lemma andl_eval (i j : fin n) (v) : (andl i j).eval v = v.nth i && v.nth j := by simp[andl]

@[simp] lemma orl_eval (i j : fin n) (v) : (orl i j).eval v = v.nth i || v.nth j := by simp[orl]

@[simp] lemma andl_size (i j : fin n) : (andl i j).size = 1 := by simp[andl]

@[simp] lemma orl_size (i j : fin n) : (orl i j).size = 1 := by simp[orl]

@[simp] lemma andl_depth (i j : fin n) : (andl i j).depth = 1 := by simp[andl]

@[simp] lemma orl_depth (i j : fin n) : (orl i j).depth = 1 := by simp[orl]

end

section conj 

def conj : circuit 2 1 := and {0, 1}

@[simp] lemma conj_size : (conj : circuit 2 1).size = 1 := by simp[conj]

@[simp] lemma conj_depth : (conj : circuit 2 1).depth = 1 := by simp[conj]

@[simp] lemma conj_eval (v) : (conj : circuit 2 1).eval v = v.inf := by simp[conj]

end conj

section relay'

def relay' : circuit 1 1 := relay 0

@[simp] lemma relay'_size : (relay' : circuit 1 1).size = 0 := by simp[relay']

@[simp] lemma relay'_depth : (relay' : circuit 1 1).depth = 0 := by simp[relay']

@[simp] lemma relay'_eval (v) : (relay' : circuit 1 1).eval v = v := by simp[relay']

end relay'

section

def zero_tt (n : ‚Ñï) : circuit n 1 := and ‚àÖ

instance : has_top (circuit n 1) := ‚ü®zero_tt n‚ü©

def zero_ff (n : ‚Ñï) : circuit n 1 := or ‚àÖ

instance : has_bot (circuit n 1) := ‚ü®zero_ff n‚ü©

@[simp] lemma top_bounded (k) : (‚ä§ : circuit n 1).bounded k := by unfold has_top.top; simp[zero_tt]

@[simp] lemma bot_bounded (k) : (‚ä• : circuit n 1).bounded k := by unfold has_bot.bot; simp[zero_ff]

@[simp] lemma top_eval (v) : (‚ä§ : circuit n 1).eval v = tt := by unfold has_top.top; simp[zero_tt]

@[simp] lemma bot_eval (v) : (‚ä• : circuit n 1).eval v = ff := by unfold has_bot.bot; simp[zero_ff]

@[simp] lemma top_size : (‚ä§ : circuit n 1).size = 1 := by unfold has_top.top; simp[zero_tt]

@[simp] lemma bot_size : (‚ä• : circuit n 1).size = 1 := by unfold has_bot.bot; simp[zero_ff]

@[simp] lemma top_depth : (‚ä§ : circuit n 1).depth = 1 := by unfold has_top.top; simp[zero_tt]

@[simp] lemma bot_depth : (‚ä• : circuit n 1).depth = 1 := by unfold has_bot.bot; simp[zero_ff]

end

section bounded_and

def bounded_and : Œ† n, circuit n 1 := nat.binary_recursion ‚ä§
  (Œª n hn c, (c |+| c) ‚ñ∑ conj)
  (Œª n c, (relay' |+| (c |+| c) ‚ñ∑ conj) ‚ñ∑ conj)

lemma bounded_and_bit0 {n : ‚Ñï} (h : n ‚â† 0) : bounded_and (bit0 n) = (bounded_and n |+| bounded_and n) ‚ñ∑ conj :=
nat.binary_recursion_bit0_eq h

lemma bounded_and_bit1 (n) : bounded_and (bit1 n) = (relay' |+| (bounded_and n |+| bounded_and n) ‚ñ∑ conj) ‚ñ∑ conj:=
nat.binary_recursion_bit1_eq n

lemma bounden_and_eval : ‚àÄ n (v : ùïì n), (bounded_and n).eval v = v.inf := 
nat.binary_recursion (by simp[bounded_and])
  (Œª n hn IH v, by { 
    rw ‚Üêvector.append'_half_even v,
    simp[bounded_and_bit0 hn, IH, vector.coe_succ] })
  (Œª n IH v, by { 
    rw [‚Üêvector.append'_half_odd v, bounded_and_bit1 n],
    simp[bounded_and_bit1, IH] })

lemma bounded_and_size : ‚àÄ n, (bounded_and n).size ‚â§ n - 1 :=
nat.binary_recursion (by { simp[bounded_and], })
  (Œª n h IH, by { simp[bounded_and_bit0 h], sorry })
  (Œª n IH, by { simp[bounded_and_bit1 n], })

end bounded_and

end gate

end circuit




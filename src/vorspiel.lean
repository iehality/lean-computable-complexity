import
  tactic
  data.vector
  data.vector3
  data.vector.zip
  init.data.nat.basic
  init.data.nat.div
  data.fintype.card

universes u v

open_locale big_operators

namespace list

notation `ùîπ` := list bool
notation `ùïì` := vector bool

variables {Œ± : Type*} {Œ≤ : Type*}

lemma join_to_chunks {l : list (list Œ±)} {n : ‚Ñï} (hn : n ‚â† 0) (hl : ‚àÄ x ‚àà l, length x = n) : l.join.to_chunks n = l :=
begin
  induction l with x l IH; simp,
  have : n = x.length, from (hl x (by simp)).symm,
  rcases this with rfl,
  calc to_chunks x.length (x ++ l.join) = x :: to_chunks x.length l.join
  : by simpa using list.to_chunks_eq_cons hn (by { show x ++ l.join ‚â† nil, simp, rintros rfl, exfalso, simpa using hn })
                                    ... = x :: l
  : by rw show to_chunks x.length l.join = l, from IH (Œª y hy, hl y (by simp[hy])),
end

lemma reverse_nth (l : list Œ±) {i j} (h : i + j + 1 = l.length) : l.reverse.nth i = l.nth j :=
by { induction l with a l IH generalizing i j, { simp },
  { simp, rcases j,
    { simp, rw[show i = l.reverse.length, by simpa using h, list.nth_concat_length] },
    { simp at h ‚ä¢, rw list.nth_append, exact IH (by omega), { simp, omega } } } }

lemma reverse_nth_le (l : list Œ±) {i j hi hj} (h : i + j + 1 = l.length) : l.reverse.nth_le i hi = l.nth_le j hj :=
option.some_inj.mp (by { rw [‚Üêlist.nth_le_nth, ‚Üêlist.nth_le_nth], exact reverse_nth l h })

section sup
variables [linear_order Œ±] [order_bot Œ±]

@[simp] def sup : list Œ± ‚Üí Œ±
| []        := ‚ä•
| (a :: as) := a ‚äî as.sup

lemma sup_mem : ‚àÄ {l : list Œ±}, l ‚â† [] ‚Üí l.sup ‚àà l
| [] h := by contradiction
| (a :: as) h := by { simp, by_cases C : as = nil,
  { rcases C with rfl, simp },
  { have ih : as.sup ‚àà as, from sup_mem C,
    have : as.sup ‚â§ a ‚à® a ‚â§ as.sup, from le_total (sup as) a,
    rcases this with (le | le),
    { exact or.inl le },
    { have : a ‚äî as.sup = as.sup, from sup_eq_right.mpr le,
      exact or.inr (by simpa[this] using ih) } } }

lemma le_sup_of_mem : ‚àÄ {l : list Œ±} {x}, x ‚àà l ‚Üí x ‚â§ l.sup
| []        x h := by exfalso; simpa using h
| (a :: as) x h := by { simp at h ‚ä¢, rcases h with (rfl | h), { simp }, { simp[le_sup_of_mem h] } }

@[simp] lemma nth_le_le_sup {l : list Œ±} {i} {h} : l.nth_le i h ‚â§ l.sup :=
le_sup_of_mem (nth_le_mem l i h)

end sup

section inf
variables [linear_order Œ±] [order_top Œ±]

@[simp] def inf : list Œ± ‚Üí Œ±
| []        := ‚ä§
| (a :: as) := a ‚äì as.inf

lemma inf_mem : ‚àÄ {l : list Œ±}, l ‚â† [] ‚Üí l.inf ‚àà l
| [] h := by contradiction
| (a :: as) h := by { simp, by_cases C : as = nil,
  { rcases C with rfl, simp },
  { have ih : as.inf ‚àà as, from inf_mem C,
    have : as.inf ‚â§ a ‚à® a ‚â§ as.inf, from le_total _ _,
    rcases this with (le | le),
    { have : a ‚äì as.inf = as.inf, from inf_eq_right.mpr le,
      exact or.inr (by simpa[this] using ih) },
    { simp[le] } } }

lemma inf_le_of_mem : ‚àÄ {l : list Œ±} {x}, x ‚àà l ‚Üí l.inf ‚â§ x
| []        x h := by exfalso; simpa using h
| (a :: as) x h := by { simp at h ‚ä¢, rcases h with (rfl | h), { simp }, { simp[inf_le_of_mem h] } }

@[simp] lemma nth_le_le_inf {l : list Œ±} {i} {h} : l.inf ‚â§ l.nth_le i h :=
inf_le_of_mem (nth_le_mem l i h)

@[simp] lemma append_inf : ‚àÄ l‚ÇÅ l‚ÇÇ : list Œ±, (l‚ÇÅ ++ l‚ÇÇ).inf = l‚ÇÅ.inf ‚äì l‚ÇÇ.inf
| []        l‚ÇÇ := by simp
| (a :: l‚ÇÅ) l‚ÇÇ := by simp[append_inf l‚ÇÅ l‚ÇÇ, inf_assoc]

end inf

end list

namespace vector
variables {Œ± Œ≤ Œ≥ Œ¥ : Type*}

section
variables {Œ±} {n : ‚Ñï}

def concat : vector Œ± n ‚Üí Œ± ‚Üí vector Œ± n.succ
| ‚ü®l, h‚ü© a := ‚ü®l.concat a, by simp[h]‚ü©

end

section zip_with3

variables {Œ± Œ≤ Œ≥ Œ¥} {n : ‚Ñï} (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥)

def zip_with3 (v‚ÇÅ : vector Œ± n) (v‚ÇÇ : vector Œ≤ n) (v‚ÇÉ : vector Œ≥ n) : vector Œ¥ n :=
@vector.zip_with (Œ± √ó Œ≤) Œ≥ Œ¥ n (Œª p z, f p.1 p.2 z) (vector.zip_with (Œª x y, (x, y)) v‚ÇÅ v‚ÇÇ) v‚ÇÉ

@[simp] lemma zip_with3_nth (v‚ÇÅ : vector Œ± n) (v‚ÇÇ : vector Œ≤ n) (v‚ÇÉ : vector Œ≥ n) (i) :
  (vector.zip_with3 f v‚ÇÅ v‚ÇÇ v‚ÇÉ).nth i = f (v‚ÇÅ.nth i) (v‚ÇÇ.nth i) (v‚ÇÉ.nth i) :=
by simp [vector.zip_with3]

end zip_with3

section sim_update_nth
variables {Œ±} {n m : ‚Ñï}

def sim_update_nth (v : vector (vector Œ± n) m) (i : vector (fin n) m) (a : vector Œ± m) : vector (vector Œ± n) m :=
vector.zip_with3 (Œª d i b, vector.update_nth d i b) v i a 

@[simp] lemma nth_sim_update_nth {V : vector (vector Œ± n) m} {I : vector (fin n) m} {A : vector Œ± m} {i} :
  ((sim_update_nth V I A).nth i).nth (I.nth i) = A.nth i :=
by simp[sim_update_nth]

lemma nth_sim_update_nth_of_ne {V : vector (vector Œ± n) m} {I : vector (fin n) m} {A : vector Œ± m} (i) {k} (h : I.nth i ‚â† k) :
  ((sim_update_nth V I A).nth i).nth k = (V.nth i).nth k :=
by simp[sim_update_nth]; exact nth_update_nth_of_ne h _

lemma nth_sim_update_nth_if {V : vector (vector Œ± n) m} {I : vector (fin n) m} {A : vector Œ± m} (i) {k} :
  ((sim_update_nth V I A).nth i).nth k = if I.nth i = k then A.nth i else (V.nth i).nth k :=
by { by_cases C : I.nth i = k, { simp[‚ÜêC] }, { simp[C, nth_sim_update_nth_of_ne] } }

end sim_update_nth

section rep
variables {Œ±} (n : ‚Ñï)

abbreviation rep (a : Œ±) {n} : vector Œ± n := repeat a n

end rep

lemma reverse_nth {n} (v : vector Œ± n) {i j : fin n} (h : ‚Üëi + ‚Üëj + 1 = n) : v.reverse.nth i = v.nth j :=
by { rcases v with ‚ü®v, hv‚ü©, simp[reverse, nth], refine v.reverse_nth_le (by simp[hv, h]) }

section append
/-
@[simp] lemma nth_append {n‚ÇÅ n‚ÇÇ} {v‚ÇÅ : vector Œ± n‚ÇÅ} {v‚ÇÇ : vector Œ± n‚ÇÇ} {i : fin n‚ÇÅ} {h} :
  (v‚ÇÅ.append v‚ÇÇ).nth ‚ü®i, h‚ü© = v‚ÇÅ.nth i :=
by rcases v‚ÇÅ with ‚ü®l‚ÇÅ, rfl‚ü©; rcases v‚ÇÇ with ‚ü®l‚ÇÇ, rfl‚ü©; refine list.nth_le_append _ _

example (a b c : ‚Ñï) : a + b - a = b := add_tsub_cancel_left a b

@[simp] lemma nth_append_right {n‚ÇÅ n‚ÇÇ} {v‚ÇÅ : vector Œ± n‚ÇÅ} {v‚ÇÇ : vector Œ± n‚ÇÇ} {i : fin n‚ÇÇ} {h} :
  (v‚ÇÅ.append v‚ÇÇ).nth ‚ü®n‚ÇÅ + i, h‚ü© = v‚ÇÇ.nth i :=
by rcases v‚ÇÅ with ‚ü®l‚ÇÅ, rfl‚ü©; rcases v‚ÇÇ with ‚ü®l‚ÇÇ, rfl‚ü©; by { simp[append, nth],
  simpa[add_tsub_cancel_left] using @list.nth_le_append_right _ l‚ÇÅ l‚ÇÇ (l‚ÇÅ.length + i) le_self_add (by simp) }
-/

@[simp] lemma nth_append_of_lt {n‚ÇÅ n‚ÇÇ} {v‚ÇÅ : vector Œ± n‚ÇÅ} {v‚ÇÇ : vector Œ± n‚ÇÇ} {i : ‚Ñï} {h} (hi : i < n‚ÇÅ) :
  (v‚ÇÅ.append v‚ÇÇ).nth ‚ü®i, h‚ü© = v‚ÇÅ.nth ‚ü®i, hi‚ü© :=
by rcases v‚ÇÅ with ‚ü®l‚ÇÅ, rfl‚ü©; rcases v‚ÇÇ with ‚ü®l‚ÇÇ, rfl‚ü©; refine list.nth_le_append _ _

@[simp] lemma nth_append_of_ge {n‚ÇÅ n‚ÇÇ} {v‚ÇÅ : vector Œ± n‚ÇÅ} {v‚ÇÇ : vector Œ± n‚ÇÇ} {i : ‚Ñï} {h} (hi : i ‚â• n‚ÇÅ) :
  (v‚ÇÅ.append v‚ÇÇ).nth ‚ü®i, h‚ü© = v‚ÇÇ.nth ‚ü®i - n‚ÇÅ, by omega‚ü© :=
by rcases v‚ÇÅ with ‚ü®l‚ÇÅ, rfl‚ü©; rcases v‚ÇÇ with ‚ü®l‚ÇÇ, rfl‚ü©;
{ simp[nth], refine list.nth_le_append_right hi (by simpa using h) }

end append

section append'

@[simp] def append' {n m : nat} : vector Œ± n ‚Üí vector Œ± m ‚Üí vector Œ± (m + n)
| ‚ü®l‚ÇÅ, h‚ÇÅ‚ü© ‚ü®l‚ÇÇ, h‚ÇÇ‚ü© := ‚ü® l‚ÇÅ ++ l‚ÇÇ, by simp[h‚ÇÅ, h‚ÇÇ, add_comm]‚ü©
-- ‰ª•‰∏ã„ÅÆÂ∏∞Á¥çÊ≥ï„Åå‰Ωø„Åà„Çã„Çà„ÅÜ„Å™append„ÅÆÊîπËâØÁâà

infixl ` ++·µ• `:60 := append'

@[simp] lemma append'_nil : ‚àÄ (v‚ÇÅ : vector Œ± 0) {n} (v‚ÇÇ : vector Œ± n), v‚ÇÅ ++·µ• v‚ÇÇ = v‚ÇÇ
| ‚ü®[], _‚ü© _ ‚ü®l, h‚ü© := by simp[(++·µ•)]

@[simp] lemma append'_cons : ‚àÄ {n m} (a : Œ±) (v‚ÇÅ : vector Œ± n) (v‚ÇÇ : vector Œ± m), (a ::·µ• v‚ÇÅ) ++·µ• v‚ÇÇ = a ::·µ• (v‚ÇÅ ++·µ• v‚ÇÇ)
| _ _ a ‚ü®l‚ÇÅ, h‚ÇÅ‚ü© ‚ü®l‚ÇÇ, h‚ÇÇ‚ü© := by simp[cons, (++·µ•)]

lemma to_list_append' : ‚àÄ {n m} (v : vector Œ± n) (w : vector Œ± m), (v ++·µ• w).to_list = (v.append w).to_list
| _ _ ‚ü®l‚ÇÅ, h‚ÇÅ‚ü© ‚ü®l‚ÇÇ, h‚ÇÇ‚ü© := by simp

@[simp] lemma nth_append'_of_lt {n‚ÇÅ n‚ÇÇ} {v‚ÇÅ : vector Œ± n‚ÇÅ} {v‚ÇÇ : vector Œ± n‚ÇÇ} {i : ‚Ñï} {h} (hi : i < n‚ÇÅ) :
  (v‚ÇÅ ++·µ• v‚ÇÇ).nth ‚ü®i, h‚ü© = v‚ÇÅ.nth ‚ü®i, hi‚ü© :=
by rcases v‚ÇÅ with ‚ü®l‚ÇÅ, rfl‚ü©; rcases v‚ÇÇ with ‚ü®l‚ÇÇ, rfl‚ü©; refine list.nth_le_append _ _

@[simp] lemma nth_append'_of_ge {n‚ÇÅ n‚ÇÇ} {v‚ÇÅ : vector Œ± n‚ÇÅ} {v‚ÇÇ : vector Œ± n‚ÇÇ} {i : ‚Ñï} {h} (hi : i ‚â• n‚ÇÅ) :
  (v‚ÇÅ ++·µ• v‚ÇÇ).nth ‚ü®i, h‚ü© = v‚ÇÇ.nth ‚ü®i - n‚ÇÅ, by omega‚ü© :=
by rcases v‚ÇÅ with ‚ü®l‚ÇÅ, rfl‚ü©; rcases v‚ÇÇ with ‚ü®l‚ÇÇ, rfl‚ü©;
{ simp[nth], refine list.nth_le_append_right hi (by simpa[add_comm] using h) }

end append'

section sup
variables [linear_order Œ±] [order_bot Œ±]

@[simp] lemma nth_le_le_sup {n} {v : vector Œ± n} {i} : v.nth i ‚â§ v.to_list.sup :=
list.le_sup_of_mem (by { rw nth_eq_nth_le, exact list.nth_le_mem _ _ _ })

end sup

section inf
variables [linear_order Œ±] [order_top Œ±]

def inf {n} (v : vector Œ± n) := v.to_list.inf

@[simp] lemma nth_le_le_inf {n} (v : vector Œ± n) (i) : v.inf ‚â§ v.nth i :=
list.inf_le_of_mem (by { rw nth_eq_nth_le, exact list.nth_le_mem _ _ _ })

@[simp] lemma zero_inf : ‚àÄ (v : vector Œ± 0), v.inf = ‚ä§
| ‚ü®[], _‚ü© := by simp[inf]

@[simp] lemma one_inf : ‚àÄ (v : vector Œ± 1), v.inf = v.head
| ‚ü®[a], _‚ü© := by simp[inf]

@[simp] lemma two_inf : ‚àÄ (v : vector Œ± 2), v.inf = v.head ‚äì v.nth 1
| ‚ü®[a, b], _‚ü© := by simp[inf, head, nth]

@[simp] lemma succ_inf (a : Œ±) {n} (v : vector Œ± n) : (a ::·µ• v).inf = a ‚äì v.inf :=
by simp[inf]

@[simp] lemma inf_append {n m} (v : vector Œ± n) (w : vector Œ± m) : (v ++·µ• w).inf = v.inf ‚äì w.inf :=
by rcases v; rcases w; simp[append, inf]

end inf

section 
variables {Œ±} {n : ‚Ñï}

instance : has_coe Œ± (vector Œ± n) := ‚ü®Œª a, repeat a _‚ü©

@[simp] lemma coe_val (a : Œ±) : (a : vector Œ± n).to_list = list.repeat a n := rfl

@[simp] lemma coe_head (a : Œ±) : (a : vector Œ± n.succ).head = a := by unfold_coes; simp[repeat, head]

@[simp] lemma coe_nth (a : Œ±) (i) : (a : vector Œ± n).nth i = a := by unfold_coes; simp[nth]

@[simp] lemma coe_ext (h : n ‚â† 0) (a b : Œ±) : (a : vector Œ± n) = b ‚Üî a = b :=
‚ü®Œª h, by {
  rcases n, { contradiction },
  { have : (a : vector Œ± n.succ).nth 0 = (b : vector Œ± n.succ).nth 0, from congr_fun (congr_arg nth h) 0,
    simpa using this } },
  congr_arg coe ‚ü©

@[simp] lemma coe_head_one : ‚àÄ (v : vector Œ± 1), ‚Üë(v.head) = v
| ‚ü®[a], _‚ü© := by simp[head]; refl

lemma coe_succ (n : ‚Ñï) (a : Œ±) : (a : vector Œ± n.succ) = a ::·µ• a :=
by unfold_coes; simp[repeat, cons]

end

lemma one_eq : ‚àÄ (v : vector Œ± 1), v.nth 0 ::·µ• nil = v
| ‚ü®[a], h‚ü©         := by simp[head]; refl

lemma two_eq : ‚àÄ (v : vector Œ± 2), v.nth 0 ::·µ• v.nth 1 ::·µ• nil = v
| ‚ü®[a, b], h‚ü©           := by simpa using h

def half_even {n} (v : vector Œ± (bit0 n)) : vector Œ± n √ó vector Œ± n :=
have le_bit0 : n ‚â§ bit0 n, { rw[bit0_eq_two_mul], linarith },
(of_fn (Œª i, v.nth ‚ü®i, gt_of_ge_of_gt le_bit0 i.property‚ü©),
 of_fn (Œª i, v.nth ‚ü®n + i, by simp[bit0]‚ü©))

lemma append'_half_even {n} (v : vector Œ± (bit0 n)) : (v.half_even).1 ++·µ• (v.half_even).2 = v :=
by { ext ‚ü®i, h‚ü©, rcases v with ‚ü®v, hv‚ü©, 
     have : i < n ‚à® n ‚â§ i, from lt_or_ge i n,
     rcases this with (lt | le),
     { simp[lt, half_even], refl }, { simp[le, half_even], refl } }

def half_odd {n} (v : vector Œ± (bit1 n)) : Œ± √ó vector Œ± n √ó vector Œ± n := (v.head, v.tail.half_even)

lemma append'_half_odd {n} (v : vector Œ± (bit1 n)) : 
  v.half_odd.1 ::·µ• (v.half_odd).2.1 ++·µ• (v.half_odd).2.2 = v := by simp[half_odd, append'_half_even]

@[simp] lemma nth_one {n : ‚Ñï} (a b : Œ±) (v : vector Œ± n) : (a ::·µ• b ::·µ• v).nth 1 = b :=
by rcases v; simp[cons, nth]

end vector

namespace fin
variables (n : ‚Ñï)

def max : fin n.succ := ‚ü®n, lt_add_one n‚ü©

def succ' : fin n ‚Üí fin n
| ‚ü®i, hi‚ü© := if h : i.succ < n then ‚ü®i.succ, h‚ü© else ‚ü®i, hi‚ü©

variables {n}

lemma max_succ_top : (n : fin n.succ) = ‚ä§ :=
by { ext, rw fin.coe_coe_of_lt, { refl }, { exact lt_add_one n } }

lemma coe_top : ((‚ä§ : fin n.succ) : ‚Ñï) = n := by refl

lemma lt_top_iff {i : fin n.succ} : i < ‚ä§ ‚Üî ‚Üëi < n :=
by rcases i; simp[fin.lt_def]; refl

end fin

namespace finset
variables {Œ± : Type*}

section
variables [decidable_eq Œ±] {n : ‚Ñï} (s : fin n ‚Üí Œ±)

def of_fn : finset Œ± := (list.of_fn s).to_finset

@[simp] lemma of_fn_card : (of_fn s).card ‚â§ n :=
by simpa[of_fn] using list.to_finset_card_le (list.of_fn s)

@[simp] lemma mem_of_fn {i} : s i ‚àà of_fn s :=
by { simp[of_fn], 
     rw[show s i = (list.of_fn s).nth_le i _, from (list.nth_le_of_fn s i).symm],
     exact (list.of_fn s).nth_le_mem _ _ }

lemma mem_of_fn_iff {x} : x ‚àà of_fn s ‚Üî ‚àÉ i, s i = x :=
‚ü®by { simp[of_fn, list.mem_iff_nth_le], rintros i h rfl, refine ‚ü®‚ü®i, h‚ü©, rfl‚ü© },
 by { rintros ‚ü®i, rfl‚ü©, exact mem_of_fn s }‚ü©

end

section
variables [decidable_eq Œ±] {Œπ : Type*} [fintype Œπ] (s : Œπ ‚Üí Œ±)

def cod (s : Œπ ‚Üí Œ±) : finset Œ± := (univ : finset Œπ).image s

lemma mem_cod_iff {x} : x ‚àà cod s ‚Üî ‚àÉ i, s i = x := by simp[cod]

@[simp] lemma codomain_mem_cod {x} : s x ‚àà cod s := by simp[cod]

lemma cod_card : (cod s).card ‚â§ fintype.card Œπ :=
  calc
    (image s univ).card ‚â§ univ.card      : finset.card_image_le
                    ... = fintype.card Œπ : card_univ

end

section
variables {Œ±} [semilattice_inf Œ±] [order_top Œ±]
  {Œ≤ : Type*} [decidable_eq Œ≤] [semilattice_inf Œ≤] [order_top Œ≤] {Œ≥ : Type*} {s : finset Œ≥} {f : Œ≥ ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±}

end

end finset

namespace relation
variables {Œ± : Type u} (r : Œ± ‚Üí Œ± ‚Üí Prop) {x y z : Œ±}

def deterministic : Prop := ‚àÄ x y z, r x y ‚Üí r x z ‚Üí y = z

inductive transitive_closure : Œ± ‚Üí Œ± ‚Üí Prop
| refl : ‚àÄ x, transitive_closure x x
| trans' : ‚àÄ {x y z}, transitive_closure x y ‚Üí r y z ‚Üí transitive_closure x z

attribute [simp, refl] transitive_closure.refl

namespace transitive_closure
variables {r}

@[trans] lemma trans (hxy : transitive_closure r x y) (hyz : transitive_closure r y z) : transitive_closure r x z :=
begin
  induction hyz,
  case refl { exact hxy },
  case trans' : _ _ _ _ ry'z' IH { exact (IH hxy).trans' ry'z' }
end

lemma of_r (h : r x y) : transitive_closure r x y := (transitive_closure.refl x).trans' h

end transitive_closure

inductive power : ‚Ñï ‚Üí Œ± ‚Üí Œ± ‚Üí Prop
| zero : ‚àÄ x, power 0 x x
| succ : ‚àÄ {n x y z}, power n x y ‚Üí r y z ‚Üí power n.succ x z

attribute [simp, refl] power.zero

namespace power
variables {r}

lemma add {n m} (hn : power r n x y) (hm : power r m y z) : power r (n + m) x z :=
by { induction m with m IH generalizing z, { rcases hm, simpa using hn },
     { rcases hm with (_ | ‚ü®_, _, v, _, hyv, rvz‚ü©), simpa using (IH hyv).succ rvz } }

lemma to_trcl {n} (h : power r n x y) : transitive_closure r x y :=
by { induction n with n IH generalizing y, { rcases h, refl }, { rcases h with (_ | ‚ü®_, _, v, _, hxv, rvy‚ü©), exact (IH hxv).trans' rvy } }

@[simp] lemma zero_iff : power r 0 x y ‚Üî x = y :=
‚ü®by { rintros ‚ü®‚ü©, refl }, by { rintros rfl, simp }‚ü©

lemma one_iff : power r 1 x y ‚Üî r x y :=
‚ü®by { rintros (_|‚ü®_, _, z, _, ‚ü®‚ü©, h‚ü©), exact h }, by { rintros h, exact (power.zero x).succ h }‚ü©

lemma deterministic {n} (d : deterministic r) : deterministic (power r n) :=
by { induction n with n IH, { rintros x y z ‚ü®‚ü© ‚ü®‚ü©, refl },
     { rintros x y z (_ | ‚ü®_, _, v, _, hxv, rvy‚ü©) (_ | ‚ü®_, _, w, _, hxw, rwz‚ü©),
     have : v = w, from IH x v w hxv hxw, rcases this with rfl,
     refine d v y z rvy rwz } }

lemma succ_inv {k : ‚Ñï} : r x y ‚Üí power r k y z ‚Üí power r k.succ x z := Œª h hp,
by { have : power r 1 x y, by simp[one_iff, h],
     simpa[show 1 + k = k.succ, by omega] using this.add hp }

end power

lemma trans_iff_epower : transitive_closure r x y ‚Üî ‚àÉ n, power r n x y :=
‚ü®Œª h, by { induction h with _ x y z hxy ryz IH, { refine ‚ü®0, by refl‚ü© }, 
           { rcases IH with ‚ü®n, IH‚ü©, refine ‚ü®n.succ, IH.succ ryz‚ü© } },
 by { rintros ‚ü®n, h‚ü©, refine h.to_trcl }‚ü©

def power_le (k : ‚Ñï) (x y : Œ±) : Prop := ‚àÉ n ‚â§ k, power r n x y

namespace power_le
variables {r}

@[refl, simp] lemma refl {k : ‚Ñï} : power_le r k x x := ‚ü®0, by simp‚ü©

lemma of_le {k l : ‚Ñï} (le : k ‚â§ l) : power_le r k x y ‚Üí power_le r l x y :=
by { rintros ‚ü®n, len, h‚ü©, refine ‚ü®n, le_trans len le, h‚ü© }

lemma succ {k : ‚Ñï} : power_le r k x y ‚Üí r y z ‚Üí power_le r k.succ x z :=
by { rintros ‚ü®n, len, hn‚ü© ryz, refine ‚ü®n.succ, nat.succ_le_succ len, hn.succ ryz‚ü© }

@[trans] lemma add {k l : ‚Ñï} : power_le r k x y ‚Üí power_le r l y z ‚Üí power_le r (k + l) x z :=
by { rintros ‚ü®n, len, hn‚ü© ‚ü®m, lem, hm‚ü©, refine ‚ü® n + m, add_le_add len lem, hn.add hm‚ü© }

end power_le

end relation

section complete_lattice
variables {Œπ‚ÇÅ : Sort*} {Œπ‚ÇÇ : Sort*} {Œ∫ : Œπ‚ÇÅ ‚Üí Œπ‚ÇÇ ‚Üí Sort*} {Œ± : Type*} [complete_lattice Œ±]

lemma le_supr‚ÇÉ {f : Œ† i j, Œ∫ i j ‚Üí Œ±} (i : Œπ‚ÇÅ) (j : Œπ‚ÇÇ) (k : Œ∫ i j) : f i j k ‚â§ ‚®Ü i j k, f i j k :=
le_supr_of_le i $ le_supr_of_le j $ le_supr (f i j) k

end complete_lattice

namespace set
variables {Œπ‚ÇÅ : Sort*} {Œπ‚ÇÇ : Sort*} {Œ∫ : Œπ‚ÇÅ ‚Üí Œπ‚ÇÇ ‚Üí Sort*} {Œ± : Type*}

lemma subset_Union‚ÇÉ {f : Œ† i j, Œ∫ i j ‚Üí set Œ±} (i : Œπ‚ÇÅ) (j : Œπ‚ÇÇ) (k : Œ∫ i j) : f i j k ‚äÜ ‚ãÉ i j k, f i j k :=
@le_supr‚ÇÉ _ _ _ _ _ f i j k

end set

namespace nat

@[simp] lemma bit_ff_two_mul (n : ‚Ñï) : bit ff n = 2 * n := bit0_eq_two_mul n

@[simp] lemma bit_tt_two_mul_add_one (n : ‚Ñï) : bit tt n = 2 * n + 1 := by simpa[bit, bit1] using bit0_eq_two_mul n

end nat
import tactic data.vector data.vector3 data.vector.zip init.data.nat.basic init.data.nat.div

universes u v

namespace vector
section
variables {Œ± : Type*} {n : ‚Ñï}

def concat : vector Œ± n ‚Üí Œ± ‚Üí vector Œ± n.succ
| ‚ü®l, h‚ü© a := ‚ü®l.concat a, by simp[h]‚ü©

end

section zip_with3

variables {Œ± Œ≤ Œ≥ Œ¥ : Type*} {n : ‚Ñï} (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥ ‚Üí Œ¥)

def zip_with3 (v‚ÇÅ : vector Œ± n) (v‚ÇÇ : vector Œ≤ n) (v‚ÇÉ : vector Œ≥ n) : vector Œ¥ n :=
@vector.zip_with (Œ± √ó Œ≤) Œ≥ Œ¥ n (Œª p z, f p.1 p.2 z) (vector.zip_with (Œª x y, (x, y)) v‚ÇÅ v‚ÇÇ) v‚ÇÉ

@[simp] lemma zip_with3_nth (v‚ÇÅ : vector Œ± n) (v‚ÇÇ : vector Œ≤ n) (v‚ÇÉ : vector Œ≥ n) (i) :
  (vector.zip_with3 f v‚ÇÅ v‚ÇÇ v‚ÇÉ).nth i = f (v‚ÇÅ.nth i) (v‚ÇÇ.nth i) (v‚ÇÉ.nth i) :=
by simp [vector.zip_with3]

end zip_with3

end vector

namespace relation
variables {Œ± : Type u} (r : Œ± ‚Üí Œ± ‚Üí Prop) {x y z : Œ±}

def deterministic : Prop := ‚àÄ x y z, r x y ‚Üí r x z ‚Üí y = z

inductive transitive_closure : Œ± ‚Üí Œ± ‚Üí Prop
| refl : ‚àÄ x, transitive_closure x x
| trans' : ‚àÄ {x y z}, transitive_closure x y ‚Üí r y z ‚Üí transitive_closure x z

attribute [simp, refl] transitive_closure.refl

namespace transitive_closure
variables {r}

@[trans] lemma trans (hxy : transitive_closure r x y) (hyz : transitive_closure r y z) : transitive_closure r x z :=
begin
  induction hyz,
  case refl { exact hxy },
  case trans' : _ _ _ _ ry'z' IH { exact (IH hxy).trans' ry'z' }
end

lemma of_r (h : r x y) : transitive_closure r x y := (transitive_closure.refl x).trans' h

end transitive_closure

inductive power : ‚Ñï ‚Üí Œ± ‚Üí Œ± ‚Üí Prop
| zero : ‚àÄ x, power 0 x x
| succ : ‚àÄ {n x y z}, power n x y ‚Üí r y z ‚Üí power n.succ x z

attribute [simp, refl] power.zero

namespace power
variables {r}

lemma add {n m} (hn : power r n x y) (hm : power r m y z) : power r (n + m) x z :=
by { induction m with m IH generalizing z, { rcases hm, simpa using hn },
     { rcases hm with (_ | ‚ü®_, _, v, _, hyv, rvz‚ü©), simpa using (IH hyv).succ rvz } }

lemma to_trcl {n} (h : power r n x y) : transitive_closure r x y :=
by { induction n with n IH generalizing y, { rcases h, refl }, { rcases h with (_ | ‚ü®_, _, v, _, hxv, rvy‚ü©), exact (IH hxv).trans' rvy } }

@[simp] lemma zero_iff : power r 0 x y ‚Üî x = y :=
‚ü®by { rintros ‚ü®‚ü©, refl }, by { rintros rfl, simp }‚ü©

lemma deterministic {n} (d : deterministic r) : deterministic (power r n) :=
by { induction n with n IH, { rintros x y z ‚ü®‚ü© ‚ü®‚ü©, refl },
     { rintros x y z (_ | ‚ü®_, _, v, _, hxv, rvy‚ü©) (_ | ‚ü®_, _, w, _, hxw, rwz‚ü©),
     have : v = w, from IH x v w hxv hxw, rcases this with rfl,
     refine d v y z rvy rwz } }

end power

lemma trans_iff_epower : transitive_closure r x y ‚Üî ‚àÉ n, power r n x y :=
‚ü®Œª h, by { induction h with _ x y z hxy ryz IH, { refine ‚ü®0, by refl‚ü© }, 
           { rcases IH with ‚ü®n, IH‚ü©, refine ‚ü®n.succ, IH.succ ryz‚ü© } },
 by { rintros ‚ü®n, h‚ü©, refine h.to_trcl }‚ü©

def power_le (k : ‚Ñï) (x y : Œ±) : Prop := ‚àÉ n ‚â§ k, power r n x y

namespace power_le
variables {r}

@[refl, simp] lemma refl {k : ‚Ñï} : power_le r k x x := ‚ü®0, by simp‚ü©

lemma of_le {k l : ‚Ñï} (le : k ‚â§ l) : power_le r k x y ‚Üí power_le r l x y :=
by { rintros ‚ü®n, len, h‚ü©, refine ‚ü®n, le_trans len le, h‚ü© }

lemma succ {k : ‚Ñï} : power_le r k x y ‚Üí r y z ‚Üí power_le r k.succ x z :=
by { rintros ‚ü®n, len, hn‚ü© ryz, refine ‚ü®n.succ, nat.succ_le_succ len, hn.succ ryz‚ü© }

@[trans] lemma add {k l : ‚Ñï} : power_le r k x y ‚Üí power_le r l y z ‚Üí power_le r (k + l) x z :=
by { rintros ‚ü®n, len, hn‚ü© ‚ü®m, lem, hm‚ü©, refine ‚ü® n + m, add_le_add len lem, hn.add hm‚ü© }

end power_le

end relation

namespace list

notation `ùîπ` := list bool

variables {Œ± : Type*} {Œ≤ : Type*}

lemma join_to_chunks {l : list (list Œ±)} {n : ‚Ñï} (hn : n ‚â† 0) (hl : ‚àÄ x ‚àà l, length x = n) : l.join.to_chunks n = l :=
begin
  induction l with x l IH; simp,
  have : n = x.length, from (hl x (by simp)).symm,
  rcases this with rfl,
  calc to_chunks x.length (x ++ l.join) = x :: to_chunks x.length l.join
  : by simpa using list.to_chunks_eq_cons hn (by { show x ++ l.join ‚â† nil, simp, rintros rfl, exfalso, simpa using hn })
                                    ... = x :: l
  : by rw show to_chunks x.length l.join = l, from IH (Œª y hy, hl y (by simp[hy])),
end

end list